openapi: 3.0.1
info:
  title: CoinChange Backend API
  version: 1.0.0
  description: API definition for the CoinChange application.

components:
  schemas:
    ErrorDTO:
      properties:
        errorStatusValue:
          type: integer
          format: int32
          example: 404
        errorStatus:
          type: string
          example: BAD_REQUEST
        errorTime:
          type: string
          format: date-time
          example: "2018-08-29T23:20:50"
        errorMessage:
          type: string
          example: User with same username/email and with active account already exists
        errorBusinessCode:
          type: string
          example: USER_ALREADY_EXISTS
    UserRegistrationRequestDto:
      type: object
      properties:
        username:
          type: string
          example: JohnDow
        email:
          type: string
          example: JohnDow@gmail.com
        password:
          type: string
          example: JohnDowPassw
    UserLoginRequestDto:
      type: object
      properties:
        usernameOrEmail:
          type: string
          example: JohnDow
        password:
          type: string
          example: JohnDowPassw
    UserLoginResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: JohnDow
        email:
          type: string
          example: JohnDow@gmail.com
        createdAt:
          type: string
          format: date-time
          example: "2018-08-29T23:20:50"
        updatedAt:
          type: string
          format: date-time
          example: "2018-08-29T23:20:50"
        validTo:
          type: string
          format: date-time
          example: "2100-01-01T00:00:00"
        jwtToken:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...

paths:
  /user/login:
    post:
      summary: Login user
      operationId: loginUser
      description: |
        Login a user
      requestBody:
        description: login attributes provided by a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequestDto'
        required: true
      responses:
        201:
          description: User login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDTO will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/register:
    post:
      summary: Register a new user
      operationId: createUser
      description: |
        Register a new user
      requestBody:
        description: registration attributes provided by new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequestDto'
        required: true
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDTO will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/test/{id}:
    get:
      summary: Get a user
      operationId: getUser
      description: |
        Retrieve user details by user ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user to retrieve.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        201:
          description: User loaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponseDto'
        401:
          description: Unauthorized - JWT token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        400:
          description: Bad Request - Invalid parameters or missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
