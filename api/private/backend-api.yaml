openapi: 3.0.1
info:
  title: CoinChange Backend API
  version: 1.0.0
  description: API definition for the CoinChange application.

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme.
  schemas:
    ErrorDto:
      type: object
      properties:
        errorStatusValue:
          type: integer
          format: int32
          example: 404
        errorStatus:
          type: string
          example: BAD_REQUEST
        errorTime:
          type: string
          format: date-time
          example: "2018-08-29T23:20:50"
        errorMessage:
          type: string
          example: User with same username/email and with active account already exists
        errorBusinessCode:
          type: string
          example: USER_ALREADY_EXISTS
      required:
        - errorStatusValue
        - errorStatus
        - errorTime
    UserRegistrationRequestDto:
      type: object
      properties:
        username:
          type: string
          example: JohnDow
        email:
          type: string
          example: JohnDow@gmail.com
        password:
          type: string
          example: JohnDowPassw
      required:
        - username
        - email
        - password
    UserLoginRequestDto:
      type: object
      properties:
        usernameOrEmail:
          type: string
          example: JohnDow
        password:
          type: string
          example: JohnDowPassw
      required:
        - usernameOrEmail
        - password
    RoleDto:
      type: object
      properties:
        roleName:
          type: string
          description: Name of the role.
          example: ADMIN
          required:
            - type
        operations:
          type: array
          description: List of operations associated with the role.
          items:
            type: string
            description: Name of the operation.
            example: ACCESS_ADMIN_SECTION
            required:
              - type
      required:
        - roleName
        - operations
    UserLoginResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: JohnDow
        email:
          type: string
          example: JohnDow@gmail.com
        createdAt:
          type: string
          format: date-time
          example: "2018-08-29T23:20:50"
        updatedAt:
          type: string
          format: date-time
          example: "2018-08-29T23:20:50"
        validTo:
          type: string
          format: date-time
          example: "2100-01-01T00:00:00"
        jwtToken:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
        roles:
          type: array
          description: List of roles and their associated operations.
          items:
            $ref: '#/components/schemas/RoleDto'
      required:
        - id
        - username
        - email
        - createdAt
        - updatedAt
        - validTo
        - jwtToken
        - roles
    RefreshTokenResponseDto:
      type: object
      properties:
        jwtToken:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - jwtToken


    PortfolioResponseDto:
      type: object
      properties:
        fiatBalances:
          type: array
          items:
            $ref: '#/components/schemas/UserFiatBalanceResponseDto'
        cryptoBalances:
          type: array
          items:
            $ref: '#/components/schemas/UserCryptoBalanceResponseDto'
      required:
        - fiatBalances
        - cryptoBalances
    FiatCurrencyDto:
      type: object
      properties:
        code:
          type: string
          example: USD
        name:
          type: string
          example: Dollar
      required:
        - code
        - name
    CryptoCurrencyDto:
      type: object
      properties:
        code:
          type: string
          example: BTC
        name:
          type: string
          example: Bitcoin
      required:
        - code
        - name
    UserFiatBalanceResponseDto:
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/FiatCurrencyDto'
        balance:
          type: number
          example: 1000
      required:
        - currency
        - balance
    UserCryptoBalanceResponseDto:
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/CryptoCurrencyDto'
        balance:
          type: number
          example: 1000
      required:
        - currency
        - balance

paths:
  /user/login:
    post:
      tags:
        - ApiUser
      summary: Login user
      operationId: loginUser
      description: |
        Login a user
      requestBody:
        description: login attributes provided by a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequestDto'
        required: true
      responses:
        201:
          description: User login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user/register:
    post:
      tags:
        - ApiUser
      summary: Register a new user
      operationId: createUser
      description: |
        Register a new user
      requestBody:
        description: registration attributes provided by new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequestDto'
        required: true
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user/refresh-token:
    post:
      tags:
        - ApiUser
      summary: Refresh JWT token
      operationId: refreshToken
      description: |
        Refresh the JWT token using a valid existing token.
      security:
        - bearerAuth: []
      responses:
        201:
          description: New JWT token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponseDto'
        401:
          description: Unauthorized - JWT token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        400:
          description: Bad Request - Invalid parameters or missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'



  /portfolio:
    get:
      tags:
        - ApiPortfolio
      summary: Get userÂ´s portfolio
      operationId: getPortfolio
      description: |
        Returns portfolio of the client with information about his fiat and crypto currencies
      security:
        - bearerAuth: [ ]
      responses:
        201:
          description: Whole portfolio of the user (fiat + crypto)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /fiat-currencies:
    get:
      tags:
        - ApiFiatCurrencies
      summary: Get all currently supported fiat currencies
      operationId: getSupportedFiatCurrencies
      description: |
        Returns all currently supported fiat currencies
      security:
        - bearerAuth: [ ]
      responses:
        201:
          description: List of all currently supported fiat currencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FiatCurrencyDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /crypto-currencies:
    get:
      tags:
        - ApiCryptoCurrencies
      summary: Get all currently supported crypto currencies
      operationId: getSupportedCryptoCurrencies
      description: |
        Returns all currently supported crypto currencies
      security:
        - bearerAuth: [ ]
      responses:
        201:
          description: List of all currently supported crypto currencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CryptoCurrencyDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'