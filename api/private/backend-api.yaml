openapi: 3.0.1
info:
  title: CoinChange Backend API
  version: 1.0.0
  description: API definition for the CoinChange application.

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme.
  schemas:
    ErrorDto:
      type: object
      properties:
        errorStatusValue:
          type: integer
          format: int32
          example: 404
        errorStatus:
          type: string
          example: BAD_REQUEST
        errorTime:
          type: string
          format: date-time
          example: "2018-08-29T23:20:50"
        errorMessage:
          type: string
          example: User with same username/email and with active account already exists
        errorBusinessCode:
          type: string
          example: USER_ALREADY_EXISTS
      required:
        - errorStatusValue
        - errorStatus
        - errorTime
    UserRegistrationRequestDto:
      type: object
      properties:
        username:
          type: string
          example: JohnDow
        email:
          type: string
          example: JohnDow@gmail.com
        password:
          type: string
          example: JohnDowPassw
      required:
        - username
        - email
        - password
    UserLoginRequestDto:
      type: object
      properties:
        usernameOrEmail:
          type: string
          example: JohnDow
        password:
          type: string
          example: JohnDowPassw
      required:
        - usernameOrEmail
        - password
    RoleResponseDto:
      type: object
      properties:
        roleName:
          type: string
          description: Name of the role.
          example: ADMIN
          required:
            - type
        operations:
          type: array
          description: List of operations associated with the role.
          items:
            type: string
            description: Name of the operation.
            example: ACCESS_ADMIN_SECTION
            required:
              - type
      required:
        - roleName
        - operations
    FeeCategoryResponseDto:
      type: object
      properties:
        feeCategory:
          type: string
          example: F
        feeRate:
          type: number
          example: 0.005
      required:
        - feeCategory
        - feeRate
    UserLoginResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: JohnDow
        email:
          type: string
          example: JohnDow@gmail.com
        createdAt:
          type: string
          format: date-time
          example: "2018-08-29T23:20:50"
        updatedAt:
          type: string
          format: date-time
          example: "2018-08-29T23:20:50"
        validTo:
          type: string
          format: date-time
          example: "2100-01-01T00:00:00"
        jwtToken:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
        roles:
          type: array
          description: List of roles and their associated operations.
          items:
            $ref: '#/components/schemas/RoleResponseDto'
        feeCategory:
          $ref: '#/components/schemas/FeeCategoryResponseDto'
      required:
        - id
        - username
        - email
        - createdAt
        - updatedAt
        - validTo
        - jwtToken
        - roles
        - feeCategory
    RefreshTokenResponseDto:
      type: object
      properties:
        jwtToken:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - jwtToken
    BalancesResponseDto:
      type: object
      properties:
        currenciesBalances:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyBalanceResponseDto'
      required:
        - currenciesBalances
    CurrencyResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        code:
          type: string
          example: USD
        name:
          type: string
          example: Dollar
        isActive:
          type: boolean
          example: true
        type:
          type: string
          example: F - fiat, C - crypto
      required:
        - id
        - code
        - name
        - isActive
        - type
    CurrencyBalanceResponseDto:
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyResponseDto'
        balance:
          type: number
          example: 1000
        calculatedAt:
          type: string
          format: date-time
          example: "2018-08-29T23:20:50"
      required:
        - currency
        - balance
        - calculatedAt
    CurrencyConversionRateResponseDto:
      type: object
      properties:
        soldCurrencyId:
          type: integer
          format: int64
          example: 1
        soldCurrencyCode:
          type: string
          example: EUR
        boughtCurrencyId:
          type: integer
          format: int64
          example: 1
        boughtCurrencyCode:
          type: string
          example: USD
        marketConversionRate:
          type: number
          example: 1.236
        feeRate:
          type: number
          example: 0.005
        validTo:
          type: string
          format: date-time
          example: "2025-05-28T23:20:50"
        verificationToken:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - soldCurrencyId
        - soldCurrencyCode
        - boughtCurrencyId
        - boughtCurrencyCode
        - marketConversionRate
        - feeRate
        - validTo
        - verificationToken
    SimpleTradingConversionRequestDto:
      type: object
      properties:
        verificationToken:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
        soldCurrencyAmount:
          type: number
          example: 0.5
      required:
        - verificationToken
        - soldCurrencyAmount
    AdvancedTradingConversionRequestDto:
      type: object
      properties:
        soldCurrencyCode:
          type: string
          example: EUR
        boughtCurrencyCode:
          type: string
          example: BTC
        userSelectedConversionRate:
          type: number
          example: 0.00023586
        soldCurrencyAmount:
          type: number
          example: 200
      required:
        - soldCurrencyCode
        - boughtCurrencyCode
        - userSelectedConversionRate
        - soldCurrencyAmount
    TransactionResponseDto:
      type: object
      properties:
        transactionId:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          format: int64
          example: 1
        soldCurrencyCode:
          type: string
          example: EUR
        boughtCurrencyCode:
          type: string
          example: BTC
        amountSold:
          type: number
          example: 2000
        amountBought:
          type: number
          example: 0.023
        conversionRateAfterFeesDeduction:
          type: number
          example: 0.00023586
        transactionFeeInBoughtCurrency:
          type: number
          example: 0.000025
        feeCategory:
          type: string
          example: F
        feeRate:
          type: number
          example: 0.005
        transactionType:
          type: string
          example: CONVERSION
        createdAt:
          type: string
          format: date-time
          example: "2025-05-28T23:20:50"
        processedAt:
          type: string
          format: date-time
          example: "2025-05-28T23:20:50"
        cancelledAt:
          type: string
          format: date-time
          example: "2025-05-28T23:20:50"
        externalReference:
          type: string
          example: OWSFEW1556QV3qECQW
        note:
          type: string
          example: registration bonus
      required:
        - transactionId
        - userId
        - soldCurrencyCode
        - boughtCurrencyCode
        - amountSold
        - amountBought
        - conversionRateAfterFeesDeduction
        - transactionFeeInBoughtCurrency
        - feeCategory
        - feeRate
        - transactionType
        - createdAt
    UserUpdateRequestDto:
      type: object
      properties:
        username:
          type: string
          example: JohnDow2
        email:
          type: string
          example: JohnDow2@gmail.com
        password:
          type: string
          example: JohnDowPassw2
      description: All fields are optional. Only provided fields will be updated.


paths:
  /user/login:
    post:
      tags:
        - ApiUser
      summary: Login user
      operationId: loginUser
      description: |
        Login a user
      requestBody:
        description: login attributes provided by a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequestDto'
        required: true
      responses:
        201:
          description: User login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user/register:
    post:
      tags:
        - ApiUser
      summary: Register a new user
      operationId: createUser
      description: |
        Register a new user
      requestBody:
        description: registration attributes provided by new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequestDto'
        required: true
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user/refresh-token:
    post:
      tags:
        - ApiUser
      summary: Refresh JWT token
      operationId: refreshToken
      description: |
        Refresh the JWT token using a valid existing token.
      security:
        - bearerAuth: []
      responses:
        201:
          description: New JWT token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponseDto'
        401:
          description: Unauthorized - JWT token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        400:
          description: Bad Request - Invalid parameters or missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /balance:
    get:
      tags:
        - ApiBalance
      summary: Get user´s currencies balances
      operationId: getBalances
      parameters:
        - name: type
          in: query
          description: Type of requested balance, AVAILABLE / TOTAL
          required: false
          schema:
            type: string
            enum: [AVAILABLE, TOTAL]
            default: AVAILABLE
          example: AVAILABLE
      description: |
        Returns information about fiat and crypto currencies balances (available or total) which are owned by user.
      security:
        - bearerAuth: [ ]
      responses:
        201:
          description: (available/total) balances of all user's fiat and crypto currencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /currency:
    get:
      tags:
        - ApiCurrency
      summary: Get all currently supported currencies
      operationId: getSupportedCurrencies
      description: |
        Returns all currently supported currencies
      security:
        - bearerAuth: [ ]
      responses:
        201:
          description: List of all currently supported currencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CurrencyResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /currency/{type}:
    get:
      tags:
        - ApiCurrency
      summary: Get all currently supported currencies for selected type
      operationId: getSupportedCurrenciesForType
      parameters:
        - name: type
          in: path
          description: Currency type identifier, e.g. F - fiat, C - crypto
          required: true
          schema:
            type: string
          example: F - fiat, C - crypto
      description: |
        Returns all currently supported currencies for selected type
      security:
        - bearerAuth: [ ]
      responses:
        201:
          description: List of all currently supported currencies for selected type
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CurrencyResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'

  /currency/conversion-rate/{soldCurrencyCode}-{boughtCurrencyCode}:
    get:
      tags:
        - ApiCurrency
      summary: Get market conversion rate for pair of currencies
      operationId: getMarketConversionRate
      parameters:
        - name: soldCurrencyCode
          in: path
          description: Currency code of sold currency
          required: true
          schema:
            type: string
          example: EUR
        - name: boughtCurrencyCode
          in: path
          description: Currency code of bought currency
          required: true
          schema:
            type: string
          example: USD
      description: |
        Returns market conversion rate for provided pair of currencies
      security:
        - bearerAuth: [ ]
      responses:
        201:
          description: Market conversion rate for provided pair of currencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyConversionRateResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /currency/convert-simple:
    post:
      tags:
        - ApiCurrency
      summary: Converts defined amount of sold currency into bought currency using simple trading
      operationId: convertCurrenciesUsingSimppleTrading
      description: |
         Endpoint is responsible for currencies conversion (selling of defined amount of sold currency and buying bought currency instead) using simple trading.
      requestBody:
        description: Information about sold currency, bought currency, approved conversion rate and its validity is stored within secured verification token created by backend. Information about sold currency amount is provided by user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleTradingConversionRequestDto'
        required: true
      responses:
        201:
          description: Conversion transaction successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /currency/convert-advanced:
    post:
      tags:
        - ApiCurrency
      summary: Converts defined amount of sold currency into bought currency using advanced trading
      operationId: convertCurrenciesUsingAdvancedTrading
      description: |
        Endpoint is responsible for currencies conversion (selling of defined amount of sold currency and buying bought currency instead) using advanced trading.
      requestBody:
        description: All information such as sold currency, bought currency, conversion rate and sold amount is provided by user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvancedTradingConversionRequestDto'
        required: true
      responses:
        201:
          description: Conversion transaction successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'



  /transaction:
    get:
      tags:
        - ApiTransaction
      summary: Get all transactions for the user
      operationId: getAllTransactions
      description: |
        Returns all recorded transactions for the user
      security:
        - bearerAuth: [ ]
      responses:
        201:
          description: List of all recorded transactions for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /transaction/pending:
    get:
      tags:
        - ApiTransaction
      summary: Get all transactions for the user in pending state
      operationId: getAllPendingTransactions
      description: |
        Returns all pending transactions for the user
      security:
        - bearerAuth: [ ]
      responses:
        201:
          description: List of all pending transactions for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /transaction/cancel/{id}:
    post:
      tags:
        - ApiTransaction
      summary: Cancels particular pending transaction
      operationId: cancelPendingTransaction
      parameters:
        - name: id
          in: path
          description: Transaction identifier (id of the transaction)
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      description: |
        Cancels particular pending transaction
      security:
        - bearerAuth: [ ]
      responses:
        201:
          description: List of all pending transactions for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /user/update:
    post:
      tags:
        - ApiUser
      summary: Update user data
      operationId: updateUser
      description: |
        Update logged-in user's data. Returns updated user info and new JWT.
      security:
        - bearerAuth: []
      requestBody:
        description: User data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequestDto'
      responses:
        201:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponseDto'
        400:
          description: Variants of Bad request - returned ErrorDto will specify particular type of thrown error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'